{"version":3,"sources":["redux/selectors.js","components/MenuDialog/index.js","redux/actions.js","components/Application-Bar/index.js","components/HTMLRenderer/index.js","components/TextLister/index.js","components/Table/index.js","components/Table/utils.js","data/index.js","components/WorldSelecter/index.js","pages/opening/index.js","App.js","serviceWorker.js","redux/reducers.js","redux/store.js","index.js"],"names":["getLocation","state","get","getData","getWorld","getWorldIntesity","getBudget","getSections","createSelector","data","getSectionKeys","sections","map","toJS","val","key","getCurrentSectionData","location","getDataForTables","getBudgetTableData","tableData","MenuDialog","handleBackgroundClick","open","keys","updateLocation","Drawer","ModalProps","onBackdropClick","anchor","ind","Button","component","Link","to","onClick","startCase","defaultProps","connect","window","scrollTo","top","type","payload","ApplicationBar","budget","useState","openMenu","toggleMenuDialog","AppBar","position","Toolbar","Grid","container","justify","IconButton","edge","color","aria-label","Typography","variant","HTMLRenderer","html","content","TextLister","textList","className","text","index","Table","columns","rows","arr","i","row","forEach","col","values","push","makeTableRows","TableContainer","Paper","TableHead","TableRow","title","TableCell","TableBody","rowData","tierValues","label","value","budgetBasedOnIntensity","1","2","3","4","5","6","7","8","9","10","11","world","intensity","updateWorld","worldData","updateWorldRating","rating","lockedIn","lockIn","spacing","item","xs","lg","TextField","id","onChange","e","target","style","width","disabled","select","tier","MenuItem","description","postscript","App","path","render","Boolean","hostname","match","initialState","fromJS","href","split","pop","toOrderedMap","isKeyed","toMap","toList","store","createStore","action","set","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8e675548.chunk.js","sourcesContent":["import { createSelector } from \"reselect\";\nimport { map } from \"lodash\";\n\nexport const getLocation = (state) => state.get(\"location\");\n\nexport const getData = (state) => state.get(\"data\");\n\nexport const getWorld = (state) => state.get(\"world\");\n\nexport const getWorldIntesity = (state) => state.get(\"intensity\");\n\nexport const getBudget = (state) => state.get(\"budget\");\n\nexport const getSections = createSelector(getData, (data) => {\n  return data.get(\"sections\");\n});\n\nexport const getSectionKeys = createSelector(getSections, (sections) => {\n  return map(sections.toJS(), (val, key) => {\n    return key;\n  });\n});\n\nexport const getCurrentSectionData = createSelector(\n  [getSections, getLocation],\n  (sections, location) => {\n    return sections.get(location);\n  }\n);\n\nexport const getDataForTables = createSelector(getData, (data) => {\n  return data.get(\"data\");\n});\n\nexport const getBudgetTableData = createSelector(\n  getDataForTables,\n  (tableData) => {\n    return tableData.get(\"world_budget\");\n  }\n);\n","import React from \"react\";\nimport { Drawer, Button } from \"@material-ui/core\";\nimport { connect } from \"react-redux\";\nimport { startCase } from \"lodash\";\nimport { Link } from \"react-router-dom\";\n\nimport { getSectionKeys } from \"../../redux/selectors\";\nimport { updateLocation } from \"../../redux/actions\";\n// import styles from \"../../styles\";\n\nconst MenuDialog = ({ handleBackgroundClick, open, keys, updateLocation }) => {\n  // const classes = styles.dialogStyles();\n\n  return (\n    <Drawer\n      open={open}\n      ModalProps={{ onBackdropClick: () => handleBackgroundClick(!open) }}\n      anchor=\"left\"\n      // classes={{ paper: classes.dialog }}\n    >\n      {keys.map((val, ind) => {\n        return (\n          <Button\n            key={`drawer-button-${val}-${ind}`}\n            component={Link}\n            to={val}\n            onClick={() => {\n              handleBackgroundClick(!open);\n              updateLocation(val);\n            }}\n          >\n            {startCase(val)}\n          </Button>\n        );\n      })}\n    </Drawer>\n  );\n};\n\nMenuDialog.defaultProps = {};\n\nconst mSTP = (state) => ({\n  keys: getSectionKeys(state),\n});\n\nexport default connect(mSTP, { updateLocation })(MenuDialog);\n","export const updateLocation = (location) => {\n  window.scrollTo({ top: 0 });\n  return {\n    type: \"UPDATE_LOCATION\",\n    payload: location,\n  };\n};\n\nexport const updateWorld = (worldData) => {\n  return {\n    type: \"UPDATE_WORLD\",\n    payload: worldData,\n  };\n};\n\nexport const updateWorldRating = (rating) => {\n  return {\n    type: \"UPDATE_WORLD_INTENSITY\",\n    payload: rating,\n  };\n};\n","import React, { useState } from \"react\";\nimport {\n  AppBar,\n  Toolbar,\n  IconButton,\n  Typography,\n  Button,\n  Grid,\n} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { connect } from \"react-redux\";\n\nimport { getLocation, getBudget } from \"../../redux/selectors\";\nimport MenuDialog from \"../MenuDialog\";\n\nconst ApplicationBar = ({ location, budget }) => {\n  const [openMenu, toggleMenuDialog] = useState(false);\n  return (\n    <AppBar position=\"sticky\">\n      <Toolbar>\n        <Grid container justify=\"space-between\">\n          <Grid>\n            <Grid container>\n              <IconButton\n                edge=\"start\"\n                color=\"inherit\"\n                aria-label=\"menu\"\n                onClick={() => toggleMenuDialog(!openMenu)}\n              >\n                <MenuIcon />\n              </IconButton>\n              <Typography variant=\"h6\">{location}</Typography>\n            </Grid>\n          </Grid>\n          <Grid>\n            <Button color=\"inherit\">{budget}</Button>\n          </Grid>\n        </Grid>\n      </Toolbar>\n      <MenuDialog open={openMenu} handleBackgroundClick={toggleMenuDialog} />\n    </AppBar>\n  );\n};\n\nApplicationBar.defaultProps = {\n  budget: 0,\n};\n\nconst mSTP = (state) => ({\n  location: getLocation(state),\n  budget: getBudget(state),\n});\n\nexport default connect(mSTP)(ApplicationBar);\n","import React from \"react\";\nimport Interweave from \"interweave\";\nimport { Typography } from \"@material-ui/core\";\n\nconst HTMLRenderer = ({ html }) => {\n  return (\n    <Typography>\n      <Interweave content={html} />\n    </Typography>\n  );\n};\n\nexport default HTMLRenderer;\n","import React, { Fragment } from \"react\";\nimport HTMLRenderer from \"../HTMLRenderer\";\n\nconst TextLister = ({ textList, className }) => {\n  return (\n    <Fragment>\n      {textList.map((text, index) => {\n        return (\n          <Fragment key={`html-${index}-${className}`}>\n            <HTMLRenderer html={text} />\n            <br />\n          </Fragment>\n        );\n      })}\n    </Fragment>\n  );\n};\n\nTextLister.defaultProps = {\n  className: \"\",\n};\n\nexport default TextLister;\n","import React from \"react\";\nimport {\n  TableContainer,\n  Paper,\n  Table as MaterialUITable,\n  TableRow,\n  TableCell,\n  TableBody,\n  TableHead,\n} from \"@material-ui/core\";\nimport { map } from \"lodash\";\n\nimport { makeTableRows } from \"./utils\";\n\nconst Table = ({ tableData }) => {\n  const { columns } = tableData;\n  const rows = makeTableRows(tableData);\n\n  return (\n    <TableContainer component={Paper}>\n      <MaterialUITable>\n        <TableHead>\n          <TableRow>\n            {map(columns, (val) => {\n              const { title } = val;\n              return <TableCell key={`${title}-tablecell`}>{title}</TableCell>;\n            })}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {map(rows, (row, index) => {\n            return (\n              <TableRow key={`tablerow-${index}`}>\n                {map(row, (rowData) => {\n                  return (\n                    <TableCell key={`${rowData}-tablecell`}>\n                      {rowData}\n                    </TableCell>\n                  );\n                })}\n              </TableRow>\n            );\n          })}\n        </TableBody>\n      </MaterialUITable>\n    </TableContainer>\n  );\n};\n\nexport default Table;\n","import { forEach } from \"lodash\";\n\nexport const makeTableRows = (data) => {\n  const { rows, columns } = data;\n  let arr = [];\n  for (let i = 0; i < rows; i++) {\n    let row = [];\n    forEach(columns, (col) => {\n      const { values } = col;\n      row.push(values[i]);\n    });\n    arr.push(row);\n  }\n  return arr;\n};\n","import text from \"./text.json\";\n\nconst tierValues = [\n  { label: \"1\", value: \"1\" },\n  { label: \"2\", value: \"2\" },\n  { label: \"3\", value: \"3\" },\n  { label: \"4\", value: \"4\" },\n  { label: \"5\", value: \"5\" },\n  { label: \"6\", value: \"6\" },\n  { label: \"7\", value: \"7\" },\n  { label: \"8\", value: \"8\" },\n  { label: \"9\", value: \"9\" },\n  { label: \"10\", value: \"10\" },\n  { label: \"11\", value: \"11\" },\n];\n\nconst budgetBasedOnIntensity = {\n  1: 35,\n  2: 55,\n  3: 85,\n  4: 140,\n  5: 225,\n  6: 365,\n  7: 590,\n  8: 955,\n  9: 1545,\n  10: 2500,\n  11: 1500,\n};\n\nexport default {\n  text,\n  tierValues,\n  budgetBasedOnIntensity,\n};\n","import { Button, Grid } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { TextField, MenuItem } from \"@material-ui/core\";\nimport { connect } from \"react-redux\";\n\nimport { updateWorld, updateWorldRating } from \"../../redux/actions\";\nimport { getWorld, getWorldIntesity } from \"../../redux/selectors\";\nimport tier from \"../../data\";\n\nexport const WorldSelecter = ({\n  world,\n  updateWorld,\n  updateWorldRating,\n  intensity,\n}) => {\n  const [lockedIn, lockIn] = useState(false);\n\n  return (\n    <Grid container spacing={4}>\n      <Grid item xs={9} lg={9}>\n        <TextField\n          id=\"world-name\"\n          label=\"Starting World\"\n          variant=\"filled\"\n          onChange={(e) => updateWorld(e.target.value)}\n          style={{ width: \"100%\" }}\n          disabled={lockedIn}\n        />\n      </Grid>\n      <Grid item xs={3} lg={3}>\n        <TextField\n          id=\"world-intensity\"\n          variant=\"filled\"\n          label=\"Intensity\"\n          select\n          value={intensity}\n          onChange={(e) => updateWorldRating(e.target.value)}\n          style={{ width: \"100%\" }}\n          disabled={lockedIn}\n        >\n          {tier.tierValues.map((tier) => {\n            return (\n              <MenuItem key={`menuitem-${tier.value}`} value={tier.value}>\n                {tier.label}\n              </MenuItem>\n            );\n          })}\n        </TextField>\n      </Grid>\n      <Grid item xs={12}>\n        <Button\n          variant=\"contained\"\n          style={{ width: \"50%\" }}\n          onClick={() => {\n            lockIn(!lockedIn);\n          }}\n        >\n          {lockedIn ? \"Update World\" : \"Lock In World\"}\n        </Button>\n      </Grid>\n    </Grid>\n  );\n};\n\nconst mSTP = (state) => ({\n  world: getWorld(state),\n  intensity: getWorldIntesity(state),\n});\n\nexport default connect(mSTP, { updateWorld, updateWorldRating })(WorldSelecter);\n","import { Grid, Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport TextLister from \"../../components/TextLister\";\nimport Table from \"../../components/Table\";\nimport WorldSelector from \"../../components/WorldSelecter\";\nimport {\n  getCurrentSectionData,\n  getBudgetTableData,\n} from \"../../redux/selectors\";\n\nexport const OpeningPage = ({ data, tableData }) => {\n  const { description, postscript } = data.toJS();\n  return (\n    <Grid container spacing={4}>\n      <Grid item xs={12} lg={8}>\n        <Grid container>\n          <Grid item xs={12}>\n            <TextLister textList={description} className=\"description\" />\n          </Grid>\n          <Grid item xs={12}>\n            <Table tableData={tableData.toJS()} />\n          </Grid>\n          <Grid item xs={12}>\n            <TextLister textList={postscript} className=\"postscript\" />\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item xs={12} lg={4}>\n        <Grid container>\n          <Grid item xs={12}>\n            <Typography variant=\"h4\">\n              Choose Your World and Intensity\n            </Typography>\n          </Grid>\n          <WorldSelector />\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\nconst mSTP = (state) => ({\n  data: getCurrentSectionData(state),\n  tableData: getBudgetTableData(state),\n});\n\nexport default connect(mSTP)(OpeningPage);\n","import React from \"react\";\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport { Grid } from \"@material-ui/core\";\n\nimport \"./App.css\";\nimport AppBar from \"./components/Application-Bar\";\nimport Opening from \"./pages/opening\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <AppBar />\n        <Switch>\n          <Route path=\"/opening\">\n            <Opening />\n          </Route>\n          <Route path=\"/origin\">JUMPMAN</Route>\n          <Route render={() => <Redirect to=\"/opening\" />} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { fromJS, isKeyed } from \"immutable\";\n\nimport text from \"../data\";\n\nconst initialState = fromJS(\n  {\n    location: window.location.href.split(\"/\").pop()\n      ? window.location.href.split(\"/\").pop()\n      : \"opening\",\n    world: \"\",\n    intensity: 1,\n    budget: 35,\n    data: text.text,\n  },\n  (key, value) => {\n    if (key === \"choices\" || key === \"sections\") {\n      return value.toOrderedMap();\n    } else if (isKeyed(value)) {\n      return value.toMap();\n    }\n    return value.toList();\n  }\n);\n\nexport const rootReducer = (state = initialState, action) => {\n  if (action.type === \"UPDATE_LOCATION\") {\n    return state.set(\"location\", action.payload);\n  } else if (action.type === \"UPDATE_WORLD\") {\n    return state.set(\"world\", action.payload);\n  } else if (action.type === \"UPDATE_WORLD_INTENSITY\") {\n    return state\n      .set(\"intensity\", action.payload)\n      .set(\"budget\", text.budgetBasedOnIntensity[action.payload]);\n  }\n  return state;\n};\n","import { createStore } from \"redux\";\nimport { rootReducer } from \"./reducers\";\n\nexport const store = createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { store } from \"./redux/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}